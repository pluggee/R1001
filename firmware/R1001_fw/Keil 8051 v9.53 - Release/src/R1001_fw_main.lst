C51 COMPILER V9.53.0.0   R1001_FW_MAIN                                                     10/25/2016 20:55:04 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE R1001_FW_MAIN
OBJECT MODULE PLACED IN .\src/R1001_fw_main.OBJ
COMPILER INVOKED BY: Z:\Applications\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /Users/sherifei
                    -d/plugge_git/R1001/firmware/R1001_fw/src/R1001_fw_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATF
                    -UZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/sherifeid/plugge_git/R1001/firmwar
                    -e/R1001_fw/inc;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/shared/si8051Base;/Applications/Simpli
                    -cityStudio_v3/developer/sdks/si8051/v3//Device/EFM8BB1;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Devic
                    -e/EFM8BB1/inc) REGFILE(R1001_fw.ORC) PRINT(.\src/R1001_fw_main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/R100
                    -1_fw_main.OBJ)

line level    source

   1          
   2          //-----------------------------------------------------------------------------
   3          // Includes
   4          //-----------------------------------------------------------------------------
   5          #include <SI_EFM8BB1_Register_Enums.h>                  // SFR declarations
   6          #include "InitDevice.h"
   7          #include "compiler_defs.h"
   8          #include "drv8825.h"
   9          #include "i2c.h"
  10          #include "global.h"
  11          
  12          // $[Generated Includes]
  13          // [Generated Includes]$
  14          
  15          //-----------------------------------------------------------------------------
  16          // Global Constants
  17          //-----------------------------------------------------------------------------
  18          #define PLATFORM    0x01        // platform ID, 0x01 for R1000A
  19          #define DEVID       0x01        // device ID, 0x01 for R1001 stepper motor driver
  20          #define FWVER       0x01        // firmware build
  21          //-----------------------------------------------------------------------------
  22          // Global Variables
  23          //-----------------------------------------------------------------------------
  24          
  25          
  26          // Global holder for SMBus data.
  27          // All receive data is written here
  28          // NUM_BYTES_WR used because an SMBus write is Master->Slave
  29          uint8_t SMB_DATA_IN[NUM_BYTES_WR];
  30          
  31          // Global holder for SMBus data.
  32          // All transmit data is read from here
  33          // NUM_BYTES_RD used because an SMBus read is Slave->Master
  34          uint8_t SMB_DATA_OUT[NUM_BYTES_RD];
  35          
  36          bit DATA_READY = 0;                    // Set to '1' by the SMBus ISR
  37                                                 // when a new data byte has been
  38                                                 // received.
  39          
  40          // Driver Initialization function
  41          void Init (void)
  42          {
  43   1              drv8825_init();                     // Initialize driver
  44   1              SetI2CSlaveAddress();               // Initialize I2C slave address
  45   1      }
  46          
  47          //-----------------------------------------------------------------------------
  48          // main() Routine
  49          // ----------------------------------------------------------------------------
  50          int main (void)
C51 COMPILER V9.53.0.0   R1001_FW_MAIN                                                     10/25/2016 20:55:04 PAGE 2   

  51          {
  52   1              // Call hardware initialization routine
  53   1              enter_DefaultMode_from_RESET();
  54   1      
  55   1              Init();                                         // Initialize system
  56   1      
  57   1              while (1) 
  58   1         {
  59   2                      while (!DATA_READY);             // New SMBus data received? gets out of the loop with a command transfe
             -r is complete
  60   2                      DATA_READY = 0;
  61   2      
  62   2                      // now we look at the contents of the data in the buffer and act accordingly
  63   2                      switch(SMB_DATA_IN[0]){
  64   3                      case 0x01:
  65   3                              // Return platform ID
  66   3                              // Prepare buffer with ID string
  67   3                              SMB_DATA_OUT[0] = PLATFORM;     // Platform ID
  68   3                              break;
  69   3                      case 0x02:
  70   3                              // Return device ID
  71   3                              // Prepare buffer with ID string
  72   3                              SMB_DATA_OUT[0] = DEVID;        // device ID
  73   3                              break;
  74   3                      case 0x03:
  75   3                              // Return firmware VER
  76   3                              // Prepare buffer with ID string
  77   3                              SMB_DATA_OUT[0] = FWVER;        // firmware version
  78   3                              break;
  79   3                      case 0x10:
  80   3                  // This reads out the temperature value
  81   3                  SMB_DATA_OUT[0] = temp_val;
  82   3                  break;
  83   3                      case 0x20:
  84   3                              // Set stepper motor stepping resolution
  85   3                              // This is a command to change stepping resolution, set it to the value stored in SMB_DATA_IN[1]
  86   3                          if (writelen > 1){
  87   4                                  StepRes = SMB_DATA_IN[1];       // store new value to internal variable
  88   4                                  if ((StepRes > 5) || (StepRes < 0)) {       // Limit step res to the proper range
  89   5                          StepRes = 5;
  90   5                      }
  91   4                                  SetSteppingMode();              // apply new stepping resolution setting
  92   4                              }
  93   3                          SMB_DATA_OUT[0] = StepRes;
  94   3                          // limit the range of StepRes
  95   3                              break;
  96   3                      case 0x21:
  97   3                          // here we check if writing to IDRVL and IDRVH
  98   3                          if (writelen == 2){
  99   4                      // only write IDRVL
 100   4                              IDRVL = SMB_DATA_IN[1];         // store new value to internal variable
 101   4                              SetDriveCurrent();              // apply new stepping driver current
 102   4                  }
 103   3                          else if (writelen > 2){
 104   4                      // write IDRVL & IDRVH
 105   4                      IDRVL = SMB_DATA_IN[1];         // store new value to internal variable
 106   4                      IDRVH = SMB_DATA_IN[2];         // store new value to internal variable
 107   4                      SetDriveCurrent();              // apply new stepping driver current
 108   4                  }
 109   3      
 110   3                          // Store IDRVL/H values into output buffer
 111   3                          SMB_DATA_OUT[0] = IDRVL;
 112   3                              SMB_DATA_OUT[1] = IDRVH;
C51 COMPILER V9.53.0.0   R1001_FW_MAIN                                                     10/25/2016 20:55:04 PAGE 3   

 113   3                              break;
 114   3                      case 0x22:
 115   3                  // here we check if writing to IDRVH
 116   3                  if (writelen > 1){
 117   4                      // only write IDRVH
 118   4                      IDRVH = SMB_DATA_IN[1];         // store new value to internal variable
 119   4                      SetDriveCurrent();              // apply new stepping driver current
 120   4                  }
 121   3                  // Store IDRVH value in output buffer
 122   3                  SMB_DATA_OUT[0] = IDRVH;
 123   3                              break;
 124   3                      case 0x23:
 125   3                          // Stepper driver control register
 126   3                          if (writelen > 1){
 127   4                      // parse input and execute values
 128   4                      MCTL = SMB_DATA_IN[1];          // store new value to internal variable
 129   4                      RefreshMCTL();                  // apply new stepping driver current
 130   4                  }
 131   3                          SMB_DATA_OUT[0] = MCTL;             // place refreshed MCTL value in output buffer
 132   3                          break;
 133   3                      case 0x24:
 134   3                          // refresh status register before pushing it out
 135   3                          RefreshMSTAT();
 136   3                  SMB_DATA_OUT[0] = MSTAT;             // place refreshed MCTL value in output buffer
 137   3                  break;
 138   3                      default:
 139   3                              break;
 140   3                      }
 141   2                      writelen = 0;                           // reset writelen counter
 142   2         }                             
 143   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    192    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
