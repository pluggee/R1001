C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src/InitDevice.OBJ
COMPILER INVOKED BY: Z:\Applications\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /Users/sherifei
                    -d/plugge_git/R1001/firmware/R1001_fw/src/InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZ
                    -Y(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/sherifeid/plugge_git/R1001/firmware/R
                    -1001_fw/inc;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/shared/si8051Base;/Applications/Simplicit
                    -yStudio_v3/developer/sdks/si8051/v3//Device/EFM8BB1;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/E
                    -FM8BB1/inc) REGFILE(R1001_fw.ORC) PRINT(.\src/InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/InitDevice
                    -.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1          // $[Config Calls]
  24   1          WDT_0_enter_DefaultMode_from_RESET();
  25   1          PORTS_0_enter_DefaultMode_from_RESET();
  26   1          PORTS_1_enter_DefaultMode_from_RESET();
  27   1          PBCFG_0_enter_DefaultMode_from_RESET();
  28   1          ADC_0_enter_DefaultMode_from_RESET();
  29   1          VREF_0_enter_DefaultMode_from_RESET();
  30   1          CLOCK_0_enter_DefaultMode_from_RESET();
  31   1          TIMER01_0_enter_DefaultMode_from_RESET();
  32   1          TIMER16_2_enter_DefaultMode_from_RESET();
  33   1          TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  34   1          PCA_0_enter_DefaultMode_from_RESET();
  35   1          PCACH_0_enter_DefaultMode_from_RESET();
  36   1          SMBUS_0_enter_DefaultMode_from_RESET();
  37   1          INTERRUPT_0_enter_DefaultMode_from_RESET();
  38   1          // [Config Calls]$
  39   1      
  40   1      }
  41          
  42          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  43   1          // $[WDTCN - Watchdog Timer Control]
  44   1          //Disable Watchdog with key sequence
  45   1          WDTCN = 0xDE; //First key
  46   1          WDTCN = 0xAD; //Second key
  47   1          // [WDTCN - Watchdog Timer Control]$
  48   1      
  49   1      }
  50          
C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 2   

  51          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  52   1          // $[P0 - Port 0 Pin Latch]
  53   1          // [P0 - Port 0 Pin Latch]$
  54   1      
  55   1          // $[P0MDOUT - Port 0 Output Mode]
  56   1          /*
  57   1           // P0.0 output is open-drain
  58   1           // P0.1 output is open-drain
  59   1           // P0.2 output is open-drain
  60   1           // P0.3 output is open-drain
  61   1           // P0.4 output is push-pull
  62   1           // P0.5 output is push-pull
  63   1           // P0.6 output is push-pull
  64   1           // P0.7 output is open-drain
  65   1           */
  66   1          P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
  67   1                  | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
  68   1                  | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__PUSH_PULL
  69   1                  | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__OPEN_DRAIN;
  70   1          // [P0MDOUT - Port 0 Output Mode]$
  71   1      
  72   1          // $[P0MDIN - Port 0 Input Mode]
  73   1          // [P0MDIN - Port 0 Input Mode]$
  74   1      
  75   1          // $[P0SKIP - Port 0 Skip]
  76   1          /*
  77   1           // P0.0 pin is not skipped by the crossbar
  78   1           // P0.1 pin is not skipped by the crossbar
  79   1           // P0.2 pin is skipped by the crossbar
  80   1           // P0.3 pin is skipped by the crossbar
  81   1           // P0.4 pin is not skipped by the crossbar
  82   1           // P0.5 pin is skipped by the crossbar
  83   1           // P0.6 pin is skipped by the crossbar
  84   1           // P0.7 pin is skipped by the crossbar
  85   1           */
  86   1          P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__NOT_SKIPPED
  87   1                  | P0SKIP_B2__SKIPPED | P0SKIP_B3__SKIPPED | P0SKIP_B4__NOT_SKIPPED
  88   1                  | P0SKIP_B5__SKIPPED | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
  89   1          // [P0SKIP - Port 0 Skip]$
  90   1      
  91   1          // $[P0MASK - Port 0 Mask]
  92   1          // [P0MASK - Port 0 Mask]$
  93   1      
  94   1          // $[P0MAT - Port 0 Match]
  95   1          // [P0MAT - Port 0 Match]$
  96   1      
  97   1      }
  98          
  99          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 100   1          // $[P1 - Port 1 Pin Latch]
 101   1          // [P1 - Port 1 Pin Latch]$
 102   1      
 103   1          // $[P1MDOUT - Port 1 Output Mode]
 104   1          /*
 105   1           // P1.0 output is push-pull
 106   1           // P1.1 output is push-pull
 107   1           // P1.2 output is push-pull
 108   1           // P1.3 output is push-pull
 109   1           // P1.4 output is open-drain
 110   1           // P1.5 output is open-drain
 111   1           // P1.6 output is open-drain
 112   1           */
 113   1          P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__PUSH_PULL
C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 3   

 114   1                  | P1MDOUT_B2__PUSH_PULL | P1MDOUT_B3__PUSH_PULL
 115   1                  | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 116   1                  | P1MDOUT_B6__OPEN_DRAIN;
 117   1          // [P1MDOUT - Port 1 Output Mode]$
 118   1      
 119   1          // $[P1MDIN - Port 1 Input Mode]
 120   1          // [P1MDIN - Port 1 Input Mode]$
 121   1      
 122   1          // $[P1SKIP - Port 1 Skip]
 123   1          /*
 124   1           // P1.0 pin is skipped by the crossbar
 125   1           // P1.1 pin is skipped by the crossbar
 126   1           // P1.2 pin is skipped by the crossbar
 127   1           // P1.3 pin is skipped by the crossbar
 128   1           // P1.4 pin is skipped by the crossbar
 129   1           // P1.5 pin is not skipped by the crossbar
 130   1           // P1.6 pin is not skipped by the crossbar
 131   1           */
 132   1          P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 133   1                  | P1SKIP_B3__SKIPPED | P1SKIP_B4__SKIPPED | P1SKIP_B5__NOT_SKIPPED
 134   1                  | P1SKIP_B6__NOT_SKIPPED;
 135   1          // [P1SKIP - Port 1 Skip]$
 136   1      
 137   1          // $[P1MASK - Port 1 Mask]
 138   1          // [P1MASK - Port 1 Mask]$
 139   1      
 140   1          // $[P1MAT - Port 1 Match]
 141   1          // [P1MAT - Port 1 Match]$
 142   1      
 143   1      }
 144          
 145          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 146   1          // $[XBR2 - Port I/O Crossbar 2]
 147   1          /*
 148   1           // Weak Pullups enabled 
 149   1           // Crossbar enabled
 150   1           */
 151   1          XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 152   1          // [XBR2 - Port I/O Crossbar 2]$
 153   1      
 154   1          // $[PRTDRV - Port Drive Strength]
 155   1          // [PRTDRV - Port Drive Strength]$
 156   1      
 157   1          // $[XBR0 - Port I/O Crossbar 0]
 158   1          /*
 159   1           // UART I/O unavailable at Port pin
 160   1           // SPI I/O unavailable at Port pins
 161   1           // SMBus 0 I/O routed to Port pins
 162   1           // CP0 unavailable at Port pin
 163   1           // Asynchronous CP0 unavailable at Port pin
 164   1           // CP1 unavailable at Port pin
 165   1           // Asynchronous CP1 unavailable at Port pin
 166   1           // SYSCLK unavailable at Port pin
 167   1           */
 168   1          XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 169   1                  | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 170   1                  | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 171   1          // [XBR0 - Port I/O Crossbar 0]$
 172   1      
 173   1          // $[XBR1 - Port I/O Crossbar 1]
 174   1          /*
 175   1           // CEX0 routed to Port pin
 176   1           // ECI unavailable at Port pin
C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 4   

 177   1           // T0 unavailable at Port pin
 178   1           // T1 unavailable at Port pin
 179   1           // T2 unavailable at Port pin
 180   1           */
 181   1          XBR1 = XBR1_PCA0ME__CEX0 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 182   1                  | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED;
 183   1          // [XBR1 - Port I/O Crossbar 1]$
 184   1      
 185   1      }
 186          
 187          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 188   1          // $[CLKSEL - Clock Select]
 189   1          /*
 190   1           // Clock derived from the Internal High-Frequency Oscillator
 191   1           // SYSCLK is equal to selected clock source divided by 1
 192   1           */
 193   1          CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 194   1          // [CLKSEL - Clock Select]$
 195   1      
 196   1      }
 197          
 198          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 199   1          // $[Timer Initialization]
 200   1          //Save Timer Configuration
 201   1          uint8_t TCON_save;
 202   1          TCON_save = TCON;
 203   1          //Stop Timers
 204   1          TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 205   1      
 206   1          // [Timer Initialization]$
 207   1      
 208   1          // $[TH0 - Timer 0 High Byte]
 209   1          /*
 210   1           // Timer 0 High Byte = 0x7F
 211   1           */
 212   1          TH0 = (0x7F << TH0_TH0__SHIFT);
 213   1          // [TH0 - Timer 0 High Byte]$
 214   1      
 215   1          // $[TL0 - Timer 0 Low Byte]
 216   1          /*
 217   1           // Timer 0 Low Byte = 0xFF
 218   1           */
 219   1          TL0 = (0xFF << TL0_TL0__SHIFT);
 220   1          // [TL0 - Timer 0 Low Byte]$
 221   1      
 222   1          // $[TH1 - Timer 1 High Byte]
 223   1          // [TH1 - Timer 1 High Byte]$
 224   1      
 225   1          // $[TL1 - Timer 1 Low Byte]
 226   1          /*
 227   1           // Timer 1 Low Byte = 0xC8
 228   1           */
 229   1          TL1 = (0xC8 << TL1_TL1__SHIFT);
 230   1          // [TL1 - Timer 1 Low Byte]$
 231   1      
 232   1          // $[Timer Restoration]
 233   1          //Restore Timer Configuration
 234   1          TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 235   1      
 236   1          // [Timer Restoration]$
 237   1      
 238   1      }
 239          
C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 5   

 240          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 241   1          // $[CKCON0 - Clock Control 0]
 242   1          /*
 243   1           // System clock divided by 4
 244   1           // Counter/Timer 0 uses the system clock
 245   1           // Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 246   1           // Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 247   1           // Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 248   1           // Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 249   1           // Timer 1 uses the system clock
 250   1           */
 251   1          CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__SYSCLK
 252   1                  | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 253   1                  | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 254   1                  | CKCON0_T1M__SYSCLK;
 255   1          // [CKCON0 - Clock Control 0]$
 256   1      
 257   1          // $[TMOD - Timer 0/1 Mode]
 258   1          /*
 259   1           // Mode 1, 16-bit Counter/Timer
 260   1           // Mode 2, 8-bit Counter/Timer with Auto-Reload
 261   1           // Timer Mode. Timer 0 increments on the clock defined by T0M in the
 262   1           //     CKCON0 register
 263   1           // Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 264   1           // Timer Mode. Timer 1 increments on the clock defined by T1M in the
 265   1           //     CKCON0 register
 266   1           // Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 267   1           */
 268   1          TMOD = TMOD_T0M__MODE1 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 269   1                  | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 270   1          // [TMOD - Timer 0/1 Mode]$
 271   1      
 272   1          // $[TCON - Timer 0/1 Control]
 273   1          // [TCON - Timer 0/1 Control]$
 274   1      
 275   1      }
 276          
 277          extern void SMBUS_0_enter_DefaultMode_from_RESET(void) {
 278   1          // $[SMB0ADR - SMBus 0 Slave Address]
 279   1          /*
 280   1           // General Call Address is ignored
 281   1           // SMBus Hardware Slave Address = 0x78
 282   1           */
 283   1          SMB0ADR = SMB0ADR_GC__IGNORED | (0x78 << SMB0ADR_SLV__SHIFT);
 284   1          // [SMB0ADR - SMBus 0 Slave Address]$
 285   1      
 286   1          // $[SMB0ADM - SMBus 0 Slave Address Mask]
 287   1          /*
 288   1           // Automatic slave address recognition and hardware acknowledge is
 289   1           //     enabled
 290   1           // SMBus Slave Address Mask = 0x7F
 291   1           */
 292   1          SMB0ADM = SMB0ADM_EHACK__ADR_ACK_AUTOMATIC | (0x7F << SMB0ADM_SLVM__SHIFT);
 293   1          // [SMB0ADM - SMBus 0 Slave Address Mask]$
 294   1      
 295   1          // $[SMB0TC - SMBus 0 Timing and Pin Control]
 296   1          /*
 297   1           // SCL is mapped to the lower-numbered port pin, and SDA is mapped to the
 298   1           //     higher-numbered port pin
 299   1           // No additional hold time window 
 300   1           */
 301   1          SMB0TC = SMB0TC_SWAP__SDA_HIGH_PIN | SMB0TC_SDD__NONE;
 302   1          // [SMB0TC - SMBus 0 Timing and Pin Control]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 6   

 303   1      
 304   1          // $[SMB0CF - SMBus 0 Configuration]
 305   1          /*
 306   1           // Timer 1 Overflow
 307   1           // Enable the SMBus module
 308   1           */
 309   1          SMB0CF &= ~SMB0CF_SMBCS__FMASK;
 310   1          SMB0CF |= SMB0CF_SMBCS__TIMER1 | SMB0CF_ENSMB__ENABLED;
 311   1          // [SMB0CF - SMBus 0 Configuration]$
 312   1      
 313   1      }
 314          
 315          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 316   1          // $[Timer Initialization]
 317   1          // Save Timer Configuration
 318   1          uint8_t TMR2CN0_TR2_save;
 319   1          TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 320   1          // Stop Timer
 321   1          TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 322   1          // [Timer Initialization]$
 323   1      
 324   1          // $[TMR2CN0 - Timer 2 Control]
 325   1          // [TMR2CN0 - Timer 2 Control]$
 326   1      
 327   1          // $[TMR2H - Timer 2 High Byte]
 328   1          // [TMR2H - Timer 2 High Byte]$
 329   1      
 330   1          // $[TMR2L - Timer 2 Low Byte]
 331   1          // [TMR2L - Timer 2 Low Byte]$
 332   1      
 333   1          // $[TMR2RLH - Timer 2 Reload High Byte]
 334   1          /*
 335   1           // Timer 2 Reload High Byte = 0xFF
 336   1           */
 337   1          TMR2RLH = (0xFF << TMR2RLH_TMR2RLH__SHIFT);
 338   1          // [TMR2RLH - Timer 2 Reload High Byte]$
 339   1      
 340   1          // $[TMR2RLL - Timer 2 Reload Low Byte]
 341   1          /*
 342   1           // Timer 2 Reload Low Byte = 0x34
 343   1           */
 344   1          TMR2RLL = (0x34 << TMR2RLL_TMR2RLL__SHIFT);
 345   1          // [TMR2RLL - Timer 2 Reload Low Byte]$
 346   1      
 347   1          // $[TMR2CN0]
 348   1          /*
 349   1           // Start Timer 2 running
 350   1           */
 351   1          TMR2CN0 |= TMR2CN0_TR2__RUN;
 352   1          // [TMR2CN0]$
 353   1      
 354   1          // $[Timer Restoration]
 355   1          // Restore Timer Configuration
 356   1          TMR2CN0 |= TMR2CN0_TR2_save;
 357   1          // [Timer Restoration]$
 358   1      
 359   1      }
 360          
 361          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 362   1      
 363   1          // $[EIE1 - Extended Interrupt Enable 1]
 364   1          /*
 365   1           // Enable interrupt requests generated by the ADINT flag
C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 7   

 366   1           // Disable ADC0 Window Comparison interrupt
 367   1           // Disable CP0 interrupts
 368   1           // Disable CP1 interrupts
 369   1           // Disable all Port Match interrupts
 370   1           // Disable all PCA0 interrupts
 371   1           // Enable interrupt requests generated by SMB0
 372   1           // Disable Timer 3 interrupts
 373   1           */
 374   1          EIE1 = EIE1_EADC0__ENABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 375   1                  | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 376   1                  | EIE1_ESMB0__ENABLED | EIE1_ET3__DISABLED;
 377   1          // [EIE1 - Extended Interrupt Enable 1]$
 378   1      
 379   1          // $[EIP1 - Extended Interrupt Priority 1]
 380   1          // [EIP1 - Extended Interrupt Priority 1]$
 381   1      
 382   1          // $[IE - Interrupt Enable]
 383   1          /*
 384   1           // Enable each interrupt according to its individual mask setting
 385   1           // Disable external interrupt 0
 386   1           // Disable external interrupt 1
 387   1           // Disable all SPI0 interrupts
 388   1           // Disable all Timer 0 interrupt
 389   1           // Disable all Timer 1 interrupt
 390   1           // Disable Timer 2 interrupt
 391   1           // Disable UART0 interrupt
 392   1           */
 393   1          IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 394   1                  | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 395   1                  | IE_ET2__DISABLED | IE_ES0__DISABLED;
 396   1          // [IE - Interrupt Enable]$
 397   1      
 398   1          // $[IP - Interrupt Priority]
 399   1          // [IP - Interrupt Priority]$
 400   1      
 401   1      }
 402          
 403          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 404   1          // $[ADC0CN1 - ADC0 Control 1]
 405   1          // [ADC0CN1 - ADC0 Control 1]$
 406   1      
 407   1          // $[ADC0MX - ADC0 Multiplexer Selection]
 408   1          /*
 409   1           // Select ADC0.16
 410   1           */
 411   1          ADC0MX = ADC0MX_ADC0MX__TEMP;
 412   1          // [ADC0MX - ADC0 Multiplexer Selection]$
 413   1      
 414   1          // $[ADC0CF - ADC0 Configuration]
 415   1          /*
 416   1           // SAR Clock Divider = 0x01
 417   1           // ADC0 operates in 10-bit or 12-bit mode 
 418   1           // The on-chip PGA gain is 1
 419   1           // Normal Track Mode. When ADC0 is enabled, conversion begins immediately
 420   1           //     following the start-of-conversion signal
 421   1           */
 422   1          ADC0CF = (0x01 << ADC0CF_ADSC__SHIFT) | ADC0CF_AD8BE__NORMAL
 423   1                  | ADC0CF_ADGN__GAIN_1 | ADC0CF_ADTM__TRACK_NORMAL;
 424   1          // [ADC0CF - ADC0 Configuration]$
 425   1      
 426   1          // $[ADC0AC - ADC0 Accumulator Configuration]
 427   1          /*
 428   1           // Right justified. No shifting applied
C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 8   

 429   1           // Enable 12-bit mode
 430   1           // ADC0H:ADC0L contain the result of the latest conversion when Burst
 431   1           //     Mode is disabled
 432   1           // Perform and Accumulate 4 conversions 
 433   1           */
 434   1          ADC0AC = ADC0AC_ADSJST__RIGHT_NO_SHIFT | ADC0AC_AD12BE__12_BIT_ENABLED
 435   1                  | ADC0AC_ADAE__ACC_DISABLED | ADC0AC_ADRPT__ACC_4;
 436   1          // [ADC0AC - ADC0 Accumulator Configuration]$
 437   1      
 438   1          // $[ADC0TK - ADC0 Burst Mode Track Time]
 439   1          // [ADC0TK - ADC0 Burst Mode Track Time]$
 440   1      
 441   1          // $[ADC0PWR - ADC0 Power Control]
 442   1          // [ADC0PWR - ADC0 Power Control]$
 443   1      
 444   1          // $[ADC0GTH - ADC0 Greater-Than High Byte]
 445   1          // [ADC0GTH - ADC0 Greater-Than High Byte]$
 446   1      
 447   1          // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 448   1          // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 449   1      
 450   1          // $[ADC0LTH - ADC0 Less-Than High Byte]
 451   1          // [ADC0LTH - ADC0 Less-Than High Byte]$
 452   1      
 453   1          // $[ADC0LTL - ADC0 Less-Than Low Byte]
 454   1          // [ADC0LTL - ADC0 Less-Than Low Byte]$
 455   1      
 456   1          // $[ADC0CN0 - ADC0 Control 0]
 457   1          /*
 458   1           // Enable ADC0 
 459   1           // Enable ADC0 burst mode
 460   1           // ADC0 conversion initiated on overflow of Timer 2
 461   1           */
 462   1          ADC0CN0 &= ~ADC0CN0_ADCM__FMASK;
 463   1          ADC0CN0 |= ADC0CN0_ADEN__ENABLED | ADC0CN0_ADBMEN__BURST_ENABLED
 464   1                  | ADC0CN0_ADCM__TIMER2;
 465   1          // [ADC0CN0 - ADC0 Control 0]$
 466   1      
 467   1      }
 468          
 469          extern void VREF_0_enter_DefaultMode_from_RESET(void) {
 470   1          // $[REF0CN - Voltage Reference Control]
 471   1          /*
 472   1           // Enable the Temperature Sensor
 473   1           // The ADC0 ground reference is the GND pin
 474   1           // The internal reference operates at 1.65 V nominal
 475   1           // The ADC0 voltage reference is the internal voltage reference
 476   1           */
 477   1          REF0CN = REF0CN_TEMPE__TEMP_ENABLED | REF0CN_GNDSL__GND_PIN
 478   1                  | REF0CN_IREFLVL__1P65 | REF0CN_REFSL__INTERNAL_VREF;
 479   1          // [REF0CN - Voltage Reference Control]$
 480   1      
 481   1      }
 482          
 483          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 484   1          // $[PCA Off]
 485   1          PCA0CN0_CR = PCA0CN0_CR__STOP;
 486   1          // [PCA Off]$
 487   1      
 488   1          // $[PCA0MD - PCA Mode]
 489   1          /*
 490   1           // PCA continues to function normally while the system controller is in
 491   1           //     Idle Mode
C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 9   

 492   1           // Disable the CF interrupt
 493   1           // System clock
 494   1           */
 495   1          PCA0MD = PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
 496   1                  | PCA0MD_CPS__SYSCLK;
 497   1          // [PCA0MD - PCA Mode]$
 498   1      
 499   1          // $[PCA0CENT - PCA Center Alignment Enable]
 500   1          // [PCA0CENT - PCA Center Alignment Enable]$
 501   1      
 502   1          // $[PCA0CLR - PCA Comparator Clear Control]
 503   1          // [PCA0CLR - PCA Comparator Clear Control]$
 504   1      
 505   1          // $[PCA0L - PCA Counter/Timer Low Byte]
 506   1          // [PCA0L - PCA Counter/Timer Low Byte]$
 507   1      
 508   1          // $[PCA0H - PCA Counter/Timer High Byte]
 509   1          // [PCA0H - PCA Counter/Timer High Byte]$
 510   1      
 511   1          // $[PCA0POL - PCA Output Polarity]
 512   1          /*
 513   1           // Invert polarity
 514   1           // Use default polarity
 515   1           // Use default polarity
 516   1           */
 517   1          PCA0POL = PCA0POL_CEX0POL__INVERT | PCA0POL_CEX1POL__DEFAULT
 518   1                  | PCA0POL_CEX2POL__DEFAULT;
 519   1          // [PCA0POL - PCA Output Polarity]$
 520   1      
 521   1          // $[PCA0PWM - PCA PWM Configuration]
 522   1          // [PCA0PWM - PCA PWM Configuration]$
 523   1      
 524   1          // $[PCA On]
 525   1          PCA0CN0_CR = PCA0CN0_CR__RUN;
 526   1          // [PCA On]$
 527   1      
 528   1      }
 529          
 530          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 531   1          // $[PCA0 Settings Save]
 532   1          // Select Capture/Compare register)
 533   1          PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 534   1          // [PCA0 Settings Save]$
 535   1      
 536   1          // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 537   1          /*
 538   1           // Disable negative edge capture
 539   1           // Disable CCF0 interrupts
 540   1           // Disable match function
 541   1           // 8 to 11-bit PWM selected
 542   1           // Disable positive edge capture
 543   1           // Enable comparator function
 544   1           // Enable PWM function
 545   1           // Disable toggle function
 546   1           */
 547   1          PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
 548   1                  | PCA0CPM0_MAT__DISABLED | PCA0CPM0_PWM16__8_BIT
 549   1                  | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
 550   1                  | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
 551   1          // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 552   1      
 553   1          // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 554   1          /*
C51 COMPILER V9.53.0.0   INITDEVICE                                                        10/25/2016 20:55:04 PAGE 10  

 555   1           // PCA Channel 0 Capture Module Low Byte = 0x80
 556   1           */
 557   1          PCA0CPL0 = (0x80 << PCA0CPL0_PCA0CPL0__SHIFT);
 558   1          // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 559   1      
 560   1          // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 561   1          /*
 562   1           // PCA Channel 0 Capture Module High Byte = 0x80
 563   1           */
 564   1          PCA0CPH0 = (0x80 << PCA0CPH0_PCA0CPH0__SHIFT);
 565   1          // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 566   1      
 567   1          // $[Auto-reload]
 568   1          // [Auto-reload]$
 569   1      
 570   1          // $[PCA0 Settings Restore]
 571   1          // [PCA0 Settings Restore]$
 572   1      
 573   1      }
 574          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    195    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
