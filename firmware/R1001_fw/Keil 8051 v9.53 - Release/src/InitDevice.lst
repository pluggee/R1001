C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/10/2016 12:24:55 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src/InitDevice.OBJ
COMPILER INVOKED BY: Z:\Applications\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /Users/sherifei
                    -d/plugge_git/R1001/firmware/R1001_fw/src/InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZ
                    -Y(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/sherifeid/plugge_git/R1001/firmware/R
                    -1001_fw/inc;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/shared/si8051Base;/Applications/Simplicit
                    -yStudio_v3/developer/sdks/si8051/v3//Device/EFM8BB1;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/E
                    -FM8BB1/inc) REGFILE(R1001_fw.ORC) PRINT(.\src/InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/InitDevice
                    -.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              WDT_0_enter_DefaultMode_from_RESET();
  25   1              PORTS_0_enter_DefaultMode_from_RESET();
  26   1              PORTS_1_enter_DefaultMode_from_RESET();
  27   1              PBCFG_0_enter_DefaultMode_from_RESET();
  28   1              ADC_0_enter_DefaultMode_from_RESET();
  29   1              VREF_0_enter_DefaultMode_from_RESET();
  30   1              CLOCK_0_enter_DefaultMode_from_RESET();
  31   1              TIMER01_0_enter_DefaultMode_from_RESET();
  32   1              TIMER16_2_enter_DefaultMode_from_RESET();
  33   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  34   1              SMBUS_0_enter_DefaultMode_from_RESET();
  35   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  36   1              // [Config Calls]$
  37   1      
  38   1      }
  39          
  40          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  41   1              // $[WDTCN - Watchdog Timer Control]
  42   1              //Disable Watchdog with key sequence
  43   1              WDTCN = 0xDE; //First key
  44   1              WDTCN = 0xAD; //Second key
  45   1              // [WDTCN - Watchdog Timer Control]$
  46   1      
  47   1      }
  48          
  49          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  50   1              // $[P0 - Port 0 Pin Latch]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/10/2016 12:24:55 PAGE 2   

  51   1              // [P0 - Port 0 Pin Latch]$
  52   1      
  53   1              // $[P0MDOUT - Port 0 Output Mode]
  54   1              /*
  55   1               // P0.0 output is open-drain
  56   1               // P0.1 output is open-drain
  57   1               // P0.2 output is open-drain
  58   1               // P0.3 output is open-drain
  59   1               // P0.4 output is push-pull
  60   1               // P0.5 output is open-drain
  61   1               // P0.6 output is open-drain
  62   1               // P0.7 output is open-drain
  63   1               */
  64   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
  65   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
  66   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__OPEN_DRAIN
  67   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__OPEN_DRAIN;
  68   1              // [P0MDOUT - Port 0 Output Mode]$
  69   1      
  70   1              // $[P0MDIN - Port 0 Input Mode]
  71   1              // [P0MDIN - Port 0 Input Mode]$
  72   1      
  73   1              // $[P0SKIP - Port 0 Skip]
  74   1              /*
  75   1               // P0.0 pin is skipped by the crossbar
  76   1               // P0.1 pin is skipped by the crossbar
  77   1               // P0.2 pin is skipped by the crossbar
  78   1               // P0.3 pin is skipped by the crossbar
  79   1               // P0.4 pin is skipped by the crossbar
  80   1               // P0.5 pin is skipped by the crossbar
  81   1               // P0.6 pin is skipped by the crossbar
  82   1               // P0.7 pin is skipped by the crossbar
  83   1               */
  84   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
  85   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
  86   1                              | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
  87   1              // [P0SKIP - Port 0 Skip]$
  88   1      
  89   1              // $[P0MASK - Port 0 Mask]
  90   1              // [P0MASK - Port 0 Mask]$
  91   1      
  92   1              // $[P0MAT - Port 0 Match]
  93   1              // [P0MAT - Port 0 Match]$
  94   1      
  95   1      }
  96          
  97          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
  98   1              // $[P1 - Port 1 Pin Latch]
  99   1              // [P1 - Port 1 Pin Latch]$
 100   1      
 101   1              // $[P1MDOUT - Port 1 Output Mode]
 102   1              // [P1MDOUT - Port 1 Output Mode]$
 103   1      
 104   1              // $[P1MDIN - Port 1 Input Mode]
 105   1              // [P1MDIN - Port 1 Input Mode]$
 106   1      
 107   1              // $[P1SKIP - Port 1 Skip]
 108   1              /*
 109   1               // P1.0 pin is skipped by the crossbar
 110   1               // P1.1 pin is skipped by the crossbar
 111   1               // P1.2 pin is skipped by the crossbar
 112   1               // P1.3 pin is skipped by the crossbar
 113   1               // P1.4 pin is skipped by the crossbar
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/10/2016 12:24:55 PAGE 3   

 114   1               // P1.5 pin is not skipped by the crossbar
 115   1               // P1.6 pin is not skipped by the crossbar
 116   1               */
 117   1              P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 118   1                              | P1SKIP_B3__SKIPPED | P1SKIP_B4__SKIPPED | P1SKIP_B5__NOT_SKIPPED
 119   1                              | P1SKIP_B6__NOT_SKIPPED;
 120   1              // [P1SKIP - Port 1 Skip]$
 121   1      
 122   1              // $[P1MASK - Port 1 Mask]
 123   1              // [P1MASK - Port 1 Mask]$
 124   1      
 125   1              // $[P1MAT - Port 1 Match]
 126   1              // [P1MAT - Port 1 Match]$
 127   1      
 128   1      }
 129          
 130          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 131   1              // $[XBR2 - Port I/O Crossbar 2]
 132   1              /*
 133   1               // Weak Pullups enabled 
 134   1               // Crossbar enabled
 135   1               */
 136   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 137   1              // [XBR2 - Port I/O Crossbar 2]$
 138   1      
 139   1              // $[PRTDRV - Port Drive Strength]
 140   1              // [PRTDRV - Port Drive Strength]$
 141   1      
 142   1              // $[XBR0 - Port I/O Crossbar 0]
 143   1              /*
 144   1               // UART I/O unavailable at Port pin
 145   1               // SPI I/O unavailable at Port pins
 146   1               // SMBus 0 I/O routed to Port pins
 147   1               // CP0 unavailable at Port pin
 148   1               // Asynchronous CP0 unavailable at Port pin
 149   1               // CP1 unavailable at Port pin
 150   1               // Asynchronous CP1 unavailable at Port pin
 151   1               // SYSCLK unavailable at Port pin
 152   1               */
 153   1              XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 154   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 155   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 156   1              // [XBR0 - Port I/O Crossbar 0]$
 157   1      
 158   1              // $[XBR1 - Port I/O Crossbar 1]
 159   1              // [XBR1 - Port I/O Crossbar 1]$
 160   1      
 161   1      }
 162          
 163          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 164   1              // $[CLKSEL - Clock Select]
 165   1              /*
 166   1               // Clock derived from the Internal High-Frequency Oscillator
 167   1               // SYSCLK is equal to selected clock source divided by 1
 168   1               */
 169   1              CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 170   1              // [CLKSEL - Clock Select]$
 171   1      
 172   1      }
 173          
 174          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 175   1              // $[Timer Initialization]
 176   1              //Save Timer Configuration
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/10/2016 12:24:55 PAGE 4   

 177   1              uint8_t TCON_save;
 178   1              TCON_save = TCON;
 179   1              //Stop Timers
 180   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 181   1      
 182   1              // [Timer Initialization]$
 183   1      
 184   1              // $[TH0 - Timer 0 High Byte]
 185   1              /*
 186   1               // Timer 0 High Byte = 0x7F
 187   1               */
 188   1              TH0 = (0x7F << TH0_TH0__SHIFT);
 189   1              // [TH0 - Timer 0 High Byte]$
 190   1      
 191   1              // $[TL0 - Timer 0 Low Byte]
 192   1              /*
 193   1               // Timer 0 Low Byte = 0xFF
 194   1               */
 195   1              TL0 = (0xFF << TL0_TL0__SHIFT);
 196   1              // [TL0 - Timer 0 Low Byte]$
 197   1      
 198   1              // $[TH1 - Timer 1 High Byte]
 199   1              // [TH1 - Timer 1 High Byte]$
 200   1      
 201   1              // $[TL1 - Timer 1 Low Byte]
 202   1              /*
 203   1               // Timer 1 Low Byte = 0xC8
 204   1               */
 205   1              TL1 = (0xC8 << TL1_TL1__SHIFT);
 206   1              // [TL1 - Timer 1 Low Byte]$
 207   1      
 208   1              // $[Timer Restoration]
 209   1              //Restore Timer Configuration
 210   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 211   1      
 212   1              // [Timer Restoration]$
 213   1      
 214   1      }
 215          
 216          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 217   1              // $[CKCON0 - Clock Control 0]
 218   1              /*
 219   1               // System clock divided by 4
 220   1               // Counter/Timer 0 uses the system clock
 221   1               // Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 222   1               // Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 223   1               // Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 224   1               // Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 225   1               // Timer 1 uses the system clock
 226   1               */
 227   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__SYSCLK
 228   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 229   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 230   1                              | CKCON0_T1M__SYSCLK;
 231   1              // [CKCON0 - Clock Control 0]$
 232   1      
 233   1              // $[TMOD - Timer 0/1 Mode]
 234   1              /*
 235   1               // Mode 1, 16-bit Counter/Timer
 236   1               // Mode 2, 8-bit Counter/Timer with Auto-Reload
 237   1               // Timer Mode. Timer 0 increments on the clock defined by T0M in the
 238   1               //     CKCON0 register
 239   1               // Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/10/2016 12:24:55 PAGE 5   

 240   1               // Timer Mode. Timer 1 increments on the clock defined by T1M in the
 241   1               //     CKCON0 register
 242   1               // Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 243   1               */
 244   1              TMOD = TMOD_T0M__MODE1 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 245   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 246   1              // [TMOD - Timer 0/1 Mode]$
 247   1      
 248   1              // $[TCON - Timer 0/1 Control]
 249   1              // [TCON - Timer 0/1 Control]$
 250   1      
 251   1      }
 252          
 253          extern void SMBUS_0_enter_DefaultMode_from_RESET(void) {
 254   1              // $[SMB0ADR - SMBus 0 Slave Address]
 255   1              /*
 256   1               // General Call Address is ignored
 257   1               // SMBus Hardware Slave Address = 0x78
 258   1               */
 259   1              SMB0ADR = SMB0ADR_GC__IGNORED | (0x78 << SMB0ADR_SLV__SHIFT);
 260   1              // [SMB0ADR - SMBus 0 Slave Address]$
 261   1      
 262   1              // $[SMB0ADM - SMBus 0 Slave Address Mask]
 263   1              /*
 264   1               // Automatic slave address recognition and hardware acknowledge is
 265   1               //     enabled
 266   1               // SMBus Slave Address Mask = 0x7F
 267   1               */
 268   1              SMB0ADM = SMB0ADM_EHACK__ADR_ACK_AUTOMATIC | (0x7F << SMB0ADM_SLVM__SHIFT);
 269   1              // [SMB0ADM - SMBus 0 Slave Address Mask]$
 270   1      
 271   1              // $[SMB0TC - SMBus 0 Timing and Pin Control]
 272   1              /*
 273   1               // SCL is mapped to the lower-numbered port pin, and SDA is mapped to the
 274   1               //     higher-numbered port pin
 275   1               // No additional hold time window 
 276   1               */
 277   1              SMB0TC = SMB0TC_SWAP__SDA_HIGH_PIN | SMB0TC_SDD__NONE;
 278   1              // [SMB0TC - SMBus 0 Timing and Pin Control]$
 279   1      
 280   1              // $[SMB0CF - SMBus 0 Configuration]
 281   1              /*
 282   1               // Timer 1 Overflow
 283   1               // Enable the SMBus module
 284   1               */
 285   1              SMB0CF &= ~SMB0CF_SMBCS__FMASK;
 286   1              SMB0CF |= SMB0CF_SMBCS__TIMER1 | SMB0CF_ENSMB__ENABLED;
 287   1              // [SMB0CF - SMBus 0 Configuration]$
 288   1      
 289   1      }
 290          
 291          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 292   1              // $[Timer Initialization]
 293   1              // Save Timer Configuration
 294   1              uint8_t TMR2CN0_TR2_save;
 295   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 296   1              // Stop Timer
 297   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 298   1              // [Timer Initialization]$
 299   1      
 300   1              // $[TMR2CN0 - Timer 2 Control]
 301   1              // [TMR2CN0 - Timer 2 Control]$
 302   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/10/2016 12:24:55 PAGE 6   

 303   1              // $[TMR2H - Timer 2 High Byte]
 304   1              // [TMR2H - Timer 2 High Byte]$
 305   1      
 306   1              // $[TMR2L - Timer 2 Low Byte]
 307   1              // [TMR2L - Timer 2 Low Byte]$
 308   1      
 309   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 310   1              /*
 311   1               // Timer 2 Reload High Byte = 0xFF
 312   1               */
 313   1              TMR2RLH = (0xFF << TMR2RLH_TMR2RLH__SHIFT);
 314   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 315   1      
 316   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 317   1              /*
 318   1               // Timer 2 Reload Low Byte = 0x34
 319   1               */
 320   1              TMR2RLL = (0x34 << TMR2RLL_TMR2RLL__SHIFT);
 321   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 322   1      
 323   1              // $[TMR2CN0]
 324   1              /*
 325   1               // Start Timer 2 running
 326   1               */
 327   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 328   1              // [TMR2CN0]$
 329   1      
 330   1              // $[Timer Restoration]
 331   1              // Restore Timer Configuration
 332   1              TMR2CN0 |= TMR2CN0_TR2_save;
 333   1              // [Timer Restoration]$
 334   1      
 335   1      }
 336          
 337          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 338   1      
 339   1              // $[EIE1 - Extended Interrupt Enable 1]
 340   1              /*
 341   1               // Enable interrupt requests generated by the ADINT flag
 342   1               // Disable ADC0 Window Comparison interrupt
 343   1               // Disable CP0 interrupts
 344   1               // Disable CP1 interrupts
 345   1               // Disable all Port Match interrupts
 346   1               // Disable all PCA0 interrupts
 347   1               // Enable interrupt requests generated by SMB0
 348   1               // Disable Timer 3 interrupts
 349   1               */
 350   1              EIE1 = EIE1_EADC0__ENABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 351   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 352   1                              | EIE1_ESMB0__ENABLED | EIE1_ET3__DISABLED;
 353   1              // [EIE1 - Extended Interrupt Enable 1]$
 354   1      
 355   1              // $[EIP1 - Extended Interrupt Priority 1]
 356   1              // [EIP1 - Extended Interrupt Priority 1]$
 357   1      
 358   1              // $[IE - Interrupt Enable]
 359   1              /*
 360   1               // Enable each interrupt according to its individual mask setting
 361   1               // Disable external interrupt 0
 362   1               // Disable external interrupt 1
 363   1               // Disable all SPI0 interrupts
 364   1               // Disable all Timer 0 interrupt
 365   1               // Disable all Timer 1 interrupt
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/10/2016 12:24:55 PAGE 7   

 366   1               // Disable Timer 2 interrupt
 367   1               // Disable UART0 interrupt
 368   1               */
 369   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 370   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 371   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 372   1              // [IE - Interrupt Enable]$
 373   1      
 374   1              // $[IP - Interrupt Priority]
 375   1              // [IP - Interrupt Priority]$
 376   1      
 377   1      }
 378          
 379          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 380   1              // $[ADC0CN1 - ADC0 Control 1]
 381   1              // [ADC0CN1 - ADC0 Control 1]$
 382   1      
 383   1              // $[ADC0MX - ADC0 Multiplexer Selection]
 384   1              /*
 385   1               // Select ADC0.16
 386   1               */
 387   1              ADC0MX = ADC0MX_ADC0MX__TEMP;
 388   1              // [ADC0MX - ADC0 Multiplexer Selection]$
 389   1      
 390   1              // $[ADC0CF - ADC0 Configuration]
 391   1              /*
 392   1               // SAR Clock Divider = 0x01
 393   1               // ADC0 operates in 10-bit or 12-bit mode 
 394   1               // The on-chip PGA gain is 1
 395   1               // Normal Track Mode. When ADC0 is enabled, conversion begins immediately
 396   1               //     following the start-of-conversion signal
 397   1               */
 398   1              ADC0CF = (0x01 << ADC0CF_ADSC__SHIFT) | ADC0CF_AD8BE__NORMAL
 399   1                              | ADC0CF_ADGN__GAIN_1 | ADC0CF_ADTM__TRACK_NORMAL;
 400   1              // [ADC0CF - ADC0 Configuration]$
 401   1      
 402   1              // $[ADC0AC - ADC0 Accumulator Configuration]
 403   1              /*
 404   1               // Right justified. No shifting applied
 405   1               // Enable 12-bit mode
 406   1               // ADC0H:ADC0L contain the result of the latest conversion when Burst
 407   1               //     Mode is disabled
 408   1               // Perform and Accumulate 4 conversions 
 409   1               */
 410   1              ADC0AC = ADC0AC_ADSJST__RIGHT_NO_SHIFT | ADC0AC_AD12BE__12_BIT_ENABLED
 411   1                              | ADC0AC_ADAE__ACC_DISABLED | ADC0AC_ADRPT__ACC_4;
 412   1              // [ADC0AC - ADC0 Accumulator Configuration]$
 413   1      
 414   1              // $[ADC0TK - ADC0 Burst Mode Track Time]
 415   1              // [ADC0TK - ADC0 Burst Mode Track Time]$
 416   1      
 417   1              // $[ADC0PWR - ADC0 Power Control]
 418   1              // [ADC0PWR - ADC0 Power Control]$
 419   1      
 420   1              // $[ADC0GTH - ADC0 Greater-Than High Byte]
 421   1              // [ADC0GTH - ADC0 Greater-Than High Byte]$
 422   1      
 423   1              // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 424   1              // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 425   1      
 426   1              // $[ADC0LTH - ADC0 Less-Than High Byte]
 427   1              // [ADC0LTH - ADC0 Less-Than High Byte]$
 428   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/10/2016 12:24:55 PAGE 8   

 429   1              // $[ADC0LTL - ADC0 Less-Than Low Byte]
 430   1              // [ADC0LTL - ADC0 Less-Than Low Byte]$
 431   1      
 432   1              // $[ADC0CN0 - ADC0 Control 0]
 433   1              /*
 434   1               // Enable ADC0 
 435   1               // Enable ADC0 burst mode
 436   1               // ADC0 conversion initiated on overflow of Timer 2
 437   1               */
 438   1              ADC0CN0 &= ~ADC0CN0_ADCM__FMASK;
 439   1              ADC0CN0 |= ADC0CN0_ADEN__ENABLED | ADC0CN0_ADBMEN__BURST_ENABLED
 440   1                              | ADC0CN0_ADCM__TIMER2;
 441   1              // [ADC0CN0 - ADC0 Control 0]$
 442   1      
 443   1      }
 444          
 445          extern void VREF_0_enter_DefaultMode_from_RESET(void) {
 446   1              // $[REF0CN - Voltage Reference Control]
 447   1              /*
 448   1               // Enable the Temperature Sensor
 449   1               // The ADC0 ground reference is the GND pin
 450   1               // The internal reference operates at 1.65 V nominal
 451   1               // The ADC0 voltage reference is the internal voltage reference
 452   1               */
 453   1              REF0CN = REF0CN_TEMPE__TEMP_ENABLED | REF0CN_GNDSL__GND_PIN
 454   1                              | REF0CN_IREFLVL__1P65 | REF0CN_REFSL__INTERNAL_VREF;
 455   1              // [REF0CN - Voltage Reference Control]$
 456   1      
 457   1      }
 458          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    159    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
