C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/14/2017 07:05:14 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src/InitDevice.OBJ
COMPILER INVOKED BY: Z:\Applications\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /Users/sherifei
                    -d/plugge_git/R1001/firmware/R1001_bl/src/InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZ
                    -Y(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/sherifeid/plugge_git/R1001/firmware/R
                    -1001_bl/inc;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/shared/si8051Base;/Applications/Simplicit
                    -yStudio_v3/developer/sdks/si8051/v3//Device/EFM8BB1;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/E
                    -FM8BB1/inc) REGFILE(R1001_bl.ORC) PRINT(.\src/InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/InitDevice
                    -.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1          // $[Config Calls]
  24   1          WDT_0_enter_DefaultMode_from_RESET();
  25   1          PBCFG_0_enter_DefaultMode_from_RESET();
  26   1          CLOCK_0_enter_DefaultMode_from_RESET();
  27   1          TIMER01_0_enter_DefaultMode_from_RESET();
  28   1          TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  29   1          SMBUS_0_enter_DefaultMode_from_RESET();
  30   1          INTERRUPT_0_enter_DefaultMode_from_RESET();
  31   1          // [Config Calls]$
  32   1      
  33   1      }
  34          
  35          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  36   1          // $[WDTCN - Watchdog Timer Control]
  37   1          //Disable Watchdog with key sequence
  38   1          WDTCN = 0xDE; //First key
  39   1          WDTCN = 0xAD; //Second key
  40   1          // [WDTCN - Watchdog Timer Control]$
  41   1      
  42   1      }
  43          
  44          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
  45   1          // $[XBR2 - Port I/O Crossbar 2]
  46   1          // [XBR2 - Port I/O Crossbar 2]$
  47   1      
  48   1          // $[PRTDRV - Port Drive Strength]
  49   1          // [PRTDRV - Port Drive Strength]$
  50   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/14/2017 07:05:14 PAGE 2   

  51   1          // $[XBR0 - Port I/O Crossbar 0]
  52   1          /*
  53   1           // UART I/O unavailable at Port pin
  54   1           // SPI I/O unavailable at Port pins
  55   1           // SMBus 0 I/O routed to Port pins
  56   1           // CP0 unavailable at Port pin
  57   1           // Asynchronous CP0 unavailable at Port pin
  58   1           // CP1 unavailable at Port pin
  59   1           // Asynchronous CP1 unavailable at Port pin
  60   1           // SYSCLK unavailable at Port pin
  61   1           */
  62   1          XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
  63   1                  | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
  64   1                  | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
  65   1          // [XBR0 - Port I/O Crossbar 0]$
  66   1      
  67   1          // $[XBR1 - Port I/O Crossbar 1]
  68   1          // [XBR1 - Port I/O Crossbar 1]$
  69   1      
  70   1      }
  71          
  72          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
  73   1          // $[CLKSEL - Clock Select]
  74   1          /*
  75   1           // Clock derived from the Internal High-Frequency Oscillator
  76   1           // SYSCLK is equal to selected clock source divided by 1
  77   1           */
  78   1          CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_1;
  79   1          // [CLKSEL - Clock Select]$
  80   1      
  81   1      }
  82          
  83          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
  84   1          // $[Timer Initialization]
  85   1          //Save Timer Configuration
  86   1          uint8_t TCON_save;
  87   1          TCON_save = TCON;
  88   1          //Stop Timers
  89   1          TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
  90   1      
  91   1          // [Timer Initialization]$
  92   1      
  93   1          // $[TH0 - Timer 0 High Byte]
  94   1          /*
  95   1           // Timer 0 High Byte = 0x7F
  96   1           */
  97   1          TH0 = (0x7F << TH0_TH0__SHIFT);
  98   1          // [TH0 - Timer 0 High Byte]$
  99   1      
 100   1          // $[TL0 - Timer 0 Low Byte]
 101   1          /*
 102   1           // Timer 0 Low Byte = 0xFF
 103   1           */
 104   1          TL0 = (0xFF << TL0_TL0__SHIFT);
 105   1          // [TL0 - Timer 0 Low Byte]$
 106   1      
 107   1          // $[TH1 - Timer 1 High Byte]
 108   1          // [TH1 - Timer 1 High Byte]$
 109   1      
 110   1          // $[TL1 - Timer 1 Low Byte]
 111   1          /*
 112   1           // Timer 1 Low Byte = 0xC8
 113   1           */
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/14/2017 07:05:14 PAGE 3   

 114   1          TL1 = (0xC8 << TL1_TL1__SHIFT);
 115   1          // [TL1 - Timer 1 Low Byte]$
 116   1      
 117   1          // $[Timer Restoration]
 118   1          //Restore Timer Configuration
 119   1          TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 120   1      
 121   1          // [Timer Restoration]$
 122   1      
 123   1      }
 124          
 125          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 126   1          // $[CKCON0 - Clock Control 0]
 127   1          /*
 128   1           // System clock divided by 4
 129   1           // Counter/Timer 0 uses the system clock
 130   1           // Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 131   1           // Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 132   1           // Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 133   1           // Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 134   1           // Timer 1 uses the system clock
 135   1           */
 136   1          CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__SYSCLK
 137   1                  | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 138   1                  | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 139   1                  | CKCON0_T1M__SYSCLK;
 140   1          // [CKCON0 - Clock Control 0]$
 141   1      
 142   1          // $[TMOD - Timer 0/1 Mode]
 143   1          /*
 144   1           // Mode 1, 16-bit Counter/Timer
 145   1           // Mode 2, 8-bit Counter/Timer with Auto-Reload
 146   1           // Timer Mode. Timer 0 increments on the clock defined by T0M in the
 147   1           //     CKCON0 register
 148   1           // Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 149   1           // Timer Mode. Timer 1 increments on the clock defined by T1M in the
 150   1           //     CKCON0 register
 151   1           // Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 152   1           */
 153   1          TMOD = TMOD_T0M__MODE1 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 154   1                  | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 155   1          // [TMOD - Timer 0/1 Mode]$
 156   1      
 157   1          // $[TCON - Timer 0/1 Control]
 158   1          // [TCON - Timer 0/1 Control]$
 159   1      
 160   1      }
 161          
 162          extern void SMBUS_0_enter_DefaultMode_from_RESET(void) {
 163   1          // $[SMB0ADR - SMBus 0 Slave Address]
 164   1          /*
 165   1           // General Call Address is ignored
 166   1           // SMBus Hardware Slave Address = 0x14
 167   1           */
 168   1          SMB0ADR = SMB0ADR_GC__IGNORED | (0x14 << SMB0ADR_SLV__SHIFT);
 169   1          // [SMB0ADR - SMBus 0 Slave Address]$
 170   1      
 171   1          // $[SMB0ADM - SMBus 0 Slave Address Mask]
 172   1          /*
 173   1           // Automatic slave address recognition and hardware acknowledge is
 174   1           //     enabled
 175   1           // SMBus Slave Address Mask = 0x7F
 176   1           */
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/14/2017 07:05:14 PAGE 4   

 177   1          SMB0ADM = SMB0ADM_EHACK__ADR_ACK_AUTOMATIC | (0x7F << SMB0ADM_SLVM__SHIFT);
 178   1          // [SMB0ADM - SMBus 0 Slave Address Mask]$
 179   1      
 180   1          // $[SMB0TC - SMBus 0 Timing and Pin Control]
 181   1          /*
 182   1           // SCL is mapped to the lower-numbered port pin, and SDA is mapped to the
 183   1           //     higher-numbered port pin
 184   1           // No additional hold time window 
 185   1           */
 186   1          SMB0TC = SMB0TC_SWAP__SDA_HIGH_PIN | SMB0TC_SDD__NONE;
 187   1          // [SMB0TC - SMBus 0 Timing and Pin Control]$
 188   1      
 189   1          // $[SMB0CF - SMBus 0 Configuration]
 190   1          /*
 191   1           // Timer 1 Overflow
 192   1           // Enable the SMBus module
 193   1           */
 194   1          SMB0CF &= ~SMB0CF_SMBCS__FMASK;
 195   1          SMB0CF |= SMB0CF_SMBCS__TIMER1 | SMB0CF_ENSMB__ENABLED;
 196   1          // [SMB0CF - SMBus 0 Configuration]$
 197   1      
 198   1      }
 199          
 200          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 201   1      
 202   1          // $[EIE1 - Extended Interrupt Enable 1]
 203   1          /*
 204   1           // Disable ADC0 Conversion Complete interrupt
 205   1           // Disable ADC0 Window Comparison interrupt
 206   1           // Disable CP0 interrupts
 207   1           // Disable CP1 interrupts
 208   1           // Disable all Port Match interrupts
 209   1           // Disable all PCA0 interrupts
 210   1           // Enable interrupt requests generated by SMB0
 211   1           // Disable Timer 3 interrupts
 212   1           */
 213   1          EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 214   1                  | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 215   1                  | EIE1_ESMB0__ENABLED | EIE1_ET3__DISABLED;
 216   1          // [EIE1 - Extended Interrupt Enable 1]$
 217   1      
 218   1          // $[EIP1 - Extended Interrupt Priority 1]
 219   1          // [EIP1 - Extended Interrupt Priority 1]$
 220   1      
 221   1          // $[IE - Interrupt Enable]
 222   1          /*
 223   1           // Enable each interrupt according to its individual mask setting
 224   1           // Disable external interrupt 0
 225   1           // Disable external interrupt 1
 226   1           // Disable all SPI0 interrupts
 227   1           // Disable all Timer 0 interrupt
 228   1           // Disable all Timer 1 interrupt
 229   1           // Disable Timer 2 interrupt
 230   1           // Disable UART0 interrupt
 231   1           */
 232   1          IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 233   1                  | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 234   1                  | IE_ET2__DISABLED | IE_ES0__DISABLED;
 235   1          // [IE - Interrupt Enable]$
 236   1      
 237   1          // $[IP - Interrupt Priority]
 238   1          // [IP - Interrupt Priority]$
 239   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/14/2017 07:05:14 PAGE 5   

 240   1      }
 241          
 242          extern void RSTSRC_0_enter_DefaultMode_from_RESET(void) {
 243   1      
 244   1      }
 245          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     92    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
