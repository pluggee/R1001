C51 COMPILER V9.53.0.0   BL_FUNCTIONS                                                      02/14/2017 07:05:13 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE BL_FUNCTIONS
OBJECT MODULE PLACED IN .\src/BL_functions.OBJ
COMPILER INVOKED BY: Z:\Applications\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /Users/sherifei
                    -d/plugge_git/R1001/firmware/R1001_bl/src/BL_functions.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFU
                    -ZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/sherifeid/plugge_git/R1001/firmware
                    -/R1001_bl/inc;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/shared/si8051Base;/Applications/Simplic
                    -ityStudio_v3/developer/sdks/si8051/v3//Device/EFM8BB1;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device
                    -/EFM8BB1/inc) REGFILE(R1001_bl.ORC) PRINT(.\src/BL_functions.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/BL_fun
                    -ctions.OBJ)

line level    source

   1          /*
   2           * BL_functions.c
   3           *
   4           *  Created on: Feb 12, 2017
   5           *      Author: sherifeid
   6           */
   7          
   8          #include "BL_functions.h"
   9          #include <compiler_defs.h>
  10          #include "R1001_bl_main.h"
  11          #include <SI_EFM8BB1_Defs.h>
  12          #include "EFM8BB1_FlashPrimitives.h"
  13          
  14          U8 Flash_Key0;
  15          U8 Flash_Key1;
  16          
  17          //-----------------------------------------------------------------------------
  18          // Set_TX_TGT_RSP_OK
  19          //-----------------------------------------------------------------------------
  20          //
  21          // Return Value:  None
  22          // Parameters:    None
  23          //
  24          // Sets TX response code to TGT_RSP_OK.
  25          //-----------------------------------------------------------------------------
  26          void Set_TX_TGT_RSP_OK(void)
  27          {
  28   1          SMB_DATA_OUT[0] = TGT_RSP_OK;
  29   1      }
  30          
  31          //-----------------------------------------------------------------------------
  32          // Set_TX_TGT_RSP_BL_MODE
  33          //-----------------------------------------------------------------------------
  34          //
  35          // Return Value:  None
  36          // Parameters:    None
  37          //
  38          // Sets TX response code to TGT_RSP_BL_MODE.
  39          //-----------------------------------------------------------------------------
  40          void Set_TX_TGT_RSP_BL_MODE(void)
  41          {
  42   1          SMB_DATA_OUT[0] = TGT_RSP_BL_MODE;
  43   1      }
  44          
  45          //-----------------------------------------------------------------------------
  46          // Set_TX_TGT_RSP_UNSUPPORTED_CMD
  47          //-----------------------------------------------------------------------------
  48          //
  49          // Return Value:  None
  50          // Parameters:    None
C51 COMPILER V9.53.0.0   BL_FUNCTIONS                                                      02/14/2017 07:05:13 PAGE 2   

  51          //
  52          // Sets TX response code to Set_TX_TGT_RSP_UNSUPPORTED_CMD.
  53          //-----------------------------------------------------------------------------
  54          void Set_TX_TGT_RSP_UNSUPPORTED_CMD (void)
  55          {
  56   1          SMB_DATA_OUT[0] = TGT_RSP_UNSUPPORTED_CMD;
  57   1      }
  58          
  59          //-----------------------------------------------------------------------------
  60          // Set_TX_TGT_RSP_ADDR_INVALID
  61          //-----------------------------------------------------------------------------
  62          //
  63          // Return Value:  None
  64          // Parameters:    None
  65          //
  66          // Sets TX response code to Set_TX_TGT_RSP_ADDR_INVALID.
  67          //-----------------------------------------------------------------------------
  68          void Set_TX_TGT_RSP_ADDR_INVALID (void)
  69          {
  70   1          // Invalid application address
  71   1          SMB_DATA_OUT[0] = TGT_RSP_ADDR_INVALID;
  72   1      }
  73          
  74          //-----------------------------------------------------------------------------
  75          // TGT_Pre_Flash
  76          //-----------------------------------------------------------------------------
  77          //
  78          // Return Value:  None
  79          // Parameters:    None
  80          //
  81          // Gets the FLKEY code out of Rx_Buf and clears Rx_Buf to help prevent flash
  82          // corruption.
  83          //-----------------------------------------------------------------------------
  84          void TGT_Pre_Flash(void)
  85          {
  86   1          // Store relevant information
  87   1          Flash_Key0 = SMB_DATA_IN[1];
  88   1          Flash_Key1 = SMB_DATA_IN[2];
  89   1          SMB_DATA_IN[1] = 0;
  90   1          SMB_DATA_IN[2] = 0;
  91   1      }
  92          
  93          
  94          //-----------------------------------------------------------------------------
  95          // TGT_Erase_Page
  96          //-----------------------------------------------------------------------------
  97          //
  98          // Return Value:  None
  99          // Parameters:    None
 100          //
 101          // Erases one page of flash.
 102          //-----------------------------------------------------------------------------
 103          void TGT_Erase_Page(void)
 104          {
 105   1          // Command Format:
 106   1          // [0] Command
 107   1          // [1] flash key code0
 108   1          // [2] flash key code1
 109   1          // [3] addr0 (LSB)
 110   1          // [4] addr1 (MSB)
 111   1          // [5] N/A
 112   1      
 113   1          // Response:
C51 COMPILER V9.53.0.0   BL_FUNCTIONS                                                      02/14/2017 07:05:13 PAGE 3   

 114   1          // [0] Response code
 115   1      
 116   1          UU16 FlashAddr;
 117   1          FlashAddr.U8[LSB] = SMB_DATA_IN[3];
 118   1          FlashAddr.U8[MSB] = SMB_DATA_IN[4];
 119   1      
 120   1          // Address out-of-bounds
 121   1          // Setup for flash operation
 122   1          TGT_Pre_Flash();
 123   1      
 124   1          if (ValidAppAddr(FlashAddr.U16))
 125   1          {
 126   2              Set_TX_TGT_RSP_OK();
 127   2              FLASH_PageErase(FlashAddr.U16);         // execute page erase
 128   2          }
 129   1          else
 130   1          {
 131   2              Set_TX_TGT_RSP_ADDR_INVALID();
 132   2          }
 133   1      }
 134          
 135          //-----------------------------------------------------------------------------
 136          // TGT_Write_Flash
 137          //-----------------------------------------------------------------------------
 138          //
 139          // Return Value:  None
 140          // Parameters:    None
 141          //
 142          // Writes 1 - 32 bytes of flash.
 143          //-----------------------------------------------------------------------------
 144          void TGT_Write_Flash(void)
 145          {
 146   1          // Command Format:
 147   1          // [0] Command
 148   1          // [1] flash key code0
 149   1          // [2] flash key code1
 150   1          // [3] addr0 (LSB)
 151   1          // [4] addr1 (MSB)
 152   1          // [5] numbytes
 153   1      
 154   1          // Bytes to write:
 155   1          // [0] byte0
 156   1          // [1] byte1
 157   1          // [.] ...
 158   1          // [numbytes-1] byte(numbytes-1)
 159   1      
 160   1          // Response:
 161   1          // [0] Response code
 162   1      
 163   1          UU16 start_addr;
 164   1          U8 numbytes;
 165   1          U8 data * Rx_Buf_ptr = &SMB_DATA_IN[6];
 166   1      
 167   1          start_addr.U8[LSB] = SMB_DATA_IN[3];
 168   1          start_addr.U8[MSB] = SMB_DATA_IN[4];
 169   1          numbytes = SMB_DATA_IN[5];
 170   1      
 171   1          // Setup for flash operation
 172   1          TGT_Pre_Flash();
 173   1      
 174   1          // check for the whole range of address
 175   1          if (ValidAppAddr(start_addr.U16) & ValidAppAddr(start_addr.U16 + numbytes))
 176   1          {
C51 COMPILER V9.53.0.0   BL_FUNCTIONS                                                      02/14/2017 07:05:13 PAGE 4   

 177   2              while (numbytes--)
 178   2              {
 179   3                  FLASH_ByteWrite(start_addr.U16, *(Rx_Buf_ptr));
 180   3      
 181   3                  Rx_Buf_ptr++;
 182   3                  start_addr.U16++;
 183   3              }
 184   2              Set_TX_TGT_RSP_OK();
 185   2          }
 186   1          else
 187   1          {
 188   2              Set_TX_TGT_RSP_ADDR_INVALID();
 189   2          }
 190   1      }
 191          
 192          //-----------------------------------------------------------------------------
 193          // TGT_Read_Flash
 194          //-----------------------------------------------------------------------------
 195          //
 196          // Return Value:  None
 197          // Parameters:    None
 198          //
 199          // Reads 1 - 32 bytes of flash.
 200          //-----------------------------------------------------------------------------
 201          void TGT_Read_Flash(void)
 202          {
 203   1          // Command Format:
 204   1          // [0] Command
 205   1          // [1] flash key code0
 206   1          // [2] flash key code1
 207   1          // [3] addr0 (LSB)
 208   1          // [4] addr1 (MSB)
 209   1          // [5] numbytes
 210   1      
 211   1          // Response:
 212   1          // [0] Response code
 213   1          // [1] byte0
 214   1          // [2] byte1
 215   1          // [.] ...
 216   1          // [numbytes] byte(numbytes-1)
 217   1      
 218   1          UU16 start_addr;
 219   1          U8 numbytes;
 220   1          U8 Tx_Buf_ptr = 1;
 221   1      
 222   1          start_addr.U8[LSB] = SMB_DATA_IN[3];
 223   1          start_addr.U8[MSB] = SMB_DATA_IN[4];
 224   1          numbytes = SMB_DATA_IN[5];
 225   1      
 226   1          // Setup for flash operation
 227   1          TGT_Pre_Flash();
 228   1      
 229   1          // check for the whole range of address
 230   1          if (ValidAppAddr(start_addr.U16) & ValidAppAddr(start_addr.U16 + numbytes))
 231   1          {
 232   2              while (numbytes--)
 233   2              {
 234   3                  SMB_DATA_OUT[Tx_Buf_ptr] = FLASH_ByteRead(start_addr.U16);
 235   3      
 236   3                  Tx_Buf_ptr++;
 237   3                  start_addr.U16++;
 238   3              }
 239   2              Set_TX_TGT_RSP_OK();
C51 COMPILER V9.53.0.0   BL_FUNCTIONS                                                      02/14/2017 07:05:13 PAGE 5   

 240   2          }
 241   1          else
 242   1          {
 243   2              Set_TX_TGT_RSP_ADDR_INVALID();
 244   2          }
 245   1      }
 246          
 247          // This function checks if the address is valid
 248          bool ValidAppAddr(U16 addr)
 249          {
 250   1          if ((addr >= APP_FW_START_ADDR) & (addr <= APP_FW_END_ADDR))
 251   1          {
 252   2              return true;
 253   2          }
 254   1          else
 255   1          {
 256   2              return false;
 257   2          }
 258   1      
 259   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    255    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
