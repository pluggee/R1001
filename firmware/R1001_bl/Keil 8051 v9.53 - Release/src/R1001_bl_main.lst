C51 COMPILER V9.53.0.0   R1001_BL_MAIN                                                     02/14/2017 07:05:39 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE R1001_BL_MAIN
OBJECT MODULE PLACED IN .\src/R1001_bl_main.OBJ
COMPILER INVOKED BY: Z:\Applications\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /Users/sherifei
                    -d/plugge_git/R1001/firmware/R1001_bl/src/R1001_bl_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATF
                    -UZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/sherifeid/plugge_git/R1001/firmwar
                    -e/R1001_bl/inc;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/shared/si8051Base;/Applications/Simpli
                    -cityStudio_v3/developer/sdks/si8051/v3//Device/EFM8BB1;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Devic
                    -e/EFM8BB1/inc) REGFILE(R1001_bl.ORC) PRINT(.\src/R1001_bl_main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/R100
                    -1_bl_main.OBJ)

line level    source

   1          
   2          //-----------------------------------------------------------------------------
   3          // Includes
   4          //-----------------------------------------------------------------------------
   5          #include <SI_EFM8BB1_Register_Enums.h>                  // SFR declarations
   6          #include "InitDevice.h"
   7          #include <compiler_defs.h>
   8          #include "R1001_bl_main.h"
   9          #include "smb.h"
  10          #include "BL_functions.h"
  11          #include "EFM8BB1_FlashPrimitives.h"
  12          
  13          //-- Defines
  14          #define APP_MODE        0
  15          #define BOOTLOADER_MODE 1
  16          
  17          
  18          // $[Generated Includes]
  19          // [Generated Includes]$
  20          
  21          // Global Variables
  22          bit DATA_READY = 0;                    // Set to '1' by the SMBus ISR
  23                                                 // when a new data byte has been
  24                                                 // received.
  25          // Global holder for SMBus data.
  26          // All receive data is written here
  27          // NUM_BYTES_WR used because an SMBus write is Master->Slave
  28          uint8_t SMB_DATA_IN[TGT_BL_BUF_SIZE];
  29          
  30          // Global holder for SMBus data.
  31          // All transmit data is read from here
  32          // NUM_BYTES_RD used because an SMBus read is Slave->Master
  33          uint8_t SMB_DATA_OUT[TGT_BL_BUF_SIZE];
  34          
  35          
  36          //-----------------------------------------------------------------------------
  37          // main() Routine
  38          // ----------------------------------------------------------------------------
  39          
  40          int main(void)
  41          {
  42   1          // Call hardware initialization routine
  43   1      //    enter_DefaultMode_from_RESET();
  44   1      
  45   1          U8 device_mode = BOOTLOADER_MODE;
  46   1      //    U8 code* codeptr;
  47   1      //    //---------------------------------------
  48   1      //    // Check the bootloader consition.
  49   1      //    //---------------------------------------
  50   1      //    codeptr = (U8 code*)(APP_FW_SIG0_ADDR);
C51 COMPILER V9.53.0.0   R1001_BL_MAIN                                                     02/14/2017 07:05:39 PAGE 2   

  51   1      //   // The Signature (in Flash) should be valid to allow application FW execution.
  52   1      //   // This is written at the end of the bootloading process by the bootloader.
  53   1      //    if (*codeptr == SIG_BYTE0)
  54   1      //    {
  55   1      //        *codeptr--;
  56   1      //        if (*codeptr == SIG_BYTE1)
  57   1      //        {
  58   1      //            *codeptr--;
  59   1      //            if (*codeptr == SIG_BYTE2)
  60   1      //            {
  61   1      //                *codeptr--;
  62   1      //                if (*codeptr == SIG_BYTE3)
  63   1      //                {
  64   1      //                    // All signature bytes match.
  65   1      //                    device_mode = APP_MODE;
  66   1      //                }
  67   1      //            }
  68   1      //        }
  69   1      //    }
  70   1      //
  71   1      //    // Enter bootloader mode on flash error reset
  72   1      //    if ((RSTSRC & 0x40) != 0)
  73   1      //    {
  74   1      //        // Check to see if the last reset was a flash error reset
  75   1      //        device_mode == BOOTLOADER_MODE;
  76   1      //    }
  77   1      
  78   1      //    if (device_mode == APP_MODE)
  79   1      //    {
  80   1      //        // If not in BL Override, jump to application
  81   1      //        START_APPLICATION();
  82   1      //    }
  83   1      
  84   1          //-------------------------------------------
  85   1          // ** BL Mode ** Initialize MCU and Variables
  86   1          //-------------------------------------------
  87   1          // Call hardware initialization routine
  88   1          enter_DefaultMode_from_RESET();
  89   1          // Set I2C address
  90   1          SetI2CSlaveAddress();
  91   1      
  92   1          //-------------------------------------------
  93   1          // Main Loop
  94   1          //-------------------------------------------
  95   1      
  96   1          while (1)
  97   1          {
  98   2              // Wait until a command is received
  99   2              while (!DATA_READY);             // New SMBus data received? gets out of the loop with a command t
             -ransfer is complete
 100   2      
 101   2      //        while (!DATA_READY){
 102   2      //            RunSMBHandler();
 103   2      //        }
 104   2      
 105   2              DATA_READY = 0;
 106   2      
 107   2              // now we look at the contents of the data in the buffer and act accordingly
 108   2              switch(SMB_DATA_IN[0]){
 109   3                  case TGT_CMD_RESET_MCU:
 110   3                      Set_TX_TGT_RSP_OK();
 111   3                      RSTSRC = 0x12; // Initiate software reset with vdd monitor enabled
 112   3                      break;
C51 COMPILER V9.53.0.0   R1001_BL_MAIN                                                     02/14/2017 07:05:39 PAGE 3   

 113   3                  case TGT_CMD_ERASE_FLASH_PAGE:
 114   3                      TGT_Erase_Page();
 115   3                      break;
 116   3                  case TGT_CMD_WRITE_FLASH_BYTES:
 117   3                      TGT_Write_Flash();
 118   3                      break;
 119   3                  case TGT_CMD_READ_FLASH_BYTES:
 120   3                      TGT_Read_Flash();
 121   3                      break;
 122   3                  case TGT_CMD_ENTER_BL_MODE:
 123   3                      Set_TX_TGT_RSP_BL_MODE();
 124   3                      break;
 125   3                  default:
 126   3                      Set_TX_TGT_RSP_UNSUPPORTED_CMD();
 127   3                      break;
 128   3              }
 129   2      
 130   2              // Set flash keys to 0
 131   2              Flash_Key0 = 0;
 132   2              Flash_Key1 = 0;
 133   2          }
 134   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     71    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     80       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
