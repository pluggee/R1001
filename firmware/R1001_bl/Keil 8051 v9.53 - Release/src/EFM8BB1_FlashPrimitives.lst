C51 COMPILER V9.53.0.0   EFM8BB1_FLASHPRIMITIVES                                           02/14/2017 19:28:44 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB1_FLASHPRIMITIVES
OBJECT MODULE PLACED IN .\src/EFM8BB1_FlashPrimitives.OBJ
COMPILER INVOKED BY: Z:\Applications\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /Users/sherifei
                    -d/plugge_git/R1001/firmware/R1001_bl/src/EFM8BB1_FlashPrimitives.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL
                    -(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/sherifeid/plugge_git/R10
                    -01/firmware/R1001_bl/inc;/Applications/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/shared/si8051Base;/Applicati
                    -ons/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/EFM8BB1;/Applications/SimplicityStudio_v3/developer/sdks/si8051
                    -/v3//Device/EFM8BB1/inc) REGFILE(R1001_bl.ORC) PRINT(.\src/EFM8BB1_FlashPrimitives.lst) COND PAGEWIDTH(120) PAGELENGTH(6
                    -5) OBJECT(.\src/EFM8BB1_FlashPrimitives.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8BB1_FlashPrimitives.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program contains several useful utilities for writing and updating
  10          // flash memory.
  11          //
  12          // Target:         EFM8BB1
  13          // Tool chain:     Keil C51
  14          //
  15          // Release 1.0
  16          //    -Initial Revision (ST)
  17          //    -10 OCT 2014
  18          //
  19          
  20          //-----------------------------------------------------------------------------
  21          // Includes
  22          //-----------------------------------------------------------------------------
  23          #include <SI_EFM8BB1_Register_Enums.h>
  24          #include "EFM8BB1_FlashPrimitives.h"
  25          
  26          //-----------------------------------------------------------------------------
  27          // Function Prototypes
  28          //-----------------------------------------------------------------------------
  29          void          FLASH_ByteWrite (FLADDR addr, char byte);
  30          uint8_t       FLASH_ByteRead  (FLADDR addr);
  31          void          FLASH_PageErase (FLADDR addr);
  32          
  33          //-----------------------------------------------------------------------------
  34          // FLASH_ByteWrite
  35          //-----------------------------------------------------------------------------
  36          //
  37          // Return Value : None
  38          // Parameters   :
  39          //   1) FLADDR addr - address of the byte to write to
  40          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
  41          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
  42          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
  43          //   2) char byte - byte to write to flash.
  44          //
  45          // This routine writes <byte> to the linear flash address <addr>.
  46          //
  47          //-----------------------------------------------------------------------------
  48          void FLASH_ByteWrite (FLADDR addr, uint8_t byte)
  49          {
  50   1         bit EA_SAVE = IE_EA;                // Preserve IE_EA
C51 COMPILER V9.53.0.0   EFM8BB1_FLASHPRIMITIVES                                           02/14/2017 19:28:44 PAGE 2   

  51   1         uint8_t xdata * data pwrite;           // Flash write pointer
  52   1      
  53   1         IE_EA = 0;                          // Disable interrupts
  54   1      
  55   1         VDM0CN = 0x80;                      // Enable VDD monitor
  56   1      
  57   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
  58   1      
  59   1         pwrite = (uint8_t xdata *) addr;
  60   1      
  61   1         FLKEY  = 0xA5;                      // Key Sequence 1
  62   1         FLKEY  = 0xF1;                      // Key Sequence 2
  63   1         PSCTL |= 0x01;                      // PSWE = 1 which enables writes
  64   1      
  65   1         VDM0CN = 0x80;                      // Enable VDD monitor
  66   1      
  67   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
  68   1         *pwrite = byte;                     // Write the byte
  69   1      
  70   1         PSCTL &= ~0x01;                     // PSWE = 0 which disable writes
  71   1      
  72   1         IE_EA = EA_SAVE;                    // Restore interrupts
  73   1      }
  74          
  75          //-----------------------------------------------------------------------------
  76          // FLASH_ByteRead
  77          //-----------------------------------------------------------------------------
  78          //
  79          // Return Value :
  80          //      uint8_t - byte read from flash
  81          // Parameters   :
  82          //   1) FLADDR addr - address of the byte to read to
  83          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
  84          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
  85          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
  86          //
  87          // This routine reads a <byte> from the linear flash address <addr>.
  88          //
  89          //-----------------------------------------------------------------------------
  90          uint8_t FLASH_ByteRead (FLADDR addr)
  91          {
  92   1         bit EA_SAVE = IE_EA;                // Preserve IE_EA
  93   1         uint8_t code * data pread;          // Flash read pointer
  94   1         uint8_t byte;
  95   1      
  96   1         IE_EA = 0;                          // Disable interrupts
  97   1      
  98   1         pread = (uint8_t code *) addr;
  99   1      
 100   1         byte = *pread;                      // Read the byte
 101   1      
 102   1         IE_EA = EA_SAVE;                    // Restore interrupts
 103   1      
 104   1         return byte;
 105   1      }
 106          
 107          //-----------------------------------------------------------------------------
 108          // FLASH_PageErase
 109          //-----------------------------------------------------------------------------
 110          //
 111          // Return Value : None
 112          // Parameters   :
 113          //   1) FLADDR addr - address of any byte in the page to erase
C51 COMPILER V9.53.0.0   EFM8BB1_FLASHPRIMITIVES                                           02/14/2017 19:28:44 PAGE 3   

 114          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
 115          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
 116          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
 117          //
 118          // This routine erases the flash page containing the linear flash address
 119          // <addr>.  Note that the page of flash page containing the Lock Byte cannot be
 120          // erased if the Lock Byte is set.
 121          //
 122          //-----------------------------------------------------------------------------
 123          void FLASH_PageErase (FLADDR addr)
 124          {
 125   1         bit EA_SAVE = IE_EA;                // Preserve IE_EA
 126   1         uint8_t xdata * data pwrite;           // Flash write pointer
 127   1      
 128   1         IE_EA = 0;                          // Disable interrupts
 129   1      
 130   1         VDM0CN = 0x80;                      // Enable VDD monitor
 131   1      
 132   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 133   1      
 134   1         pwrite = (uint8_t xdata *) addr;
 135   1      
 136   1         FLKEY  = 0xA5;                      // Key Sequence 1
 137   1         FLKEY  = 0xF1;                      // Key Sequence 2
 138   1         PSCTL |= 0x03;                      // PSWE = 1; PSEE = 1
 139   1      
 140   1         VDM0CN = 0x80;                      // Enable VDD monitor
 141   1      
 142   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 143   1         *pwrite = 0;                        // Initiate page erase
 144   1      
 145   1         PSCTL &= ~0x03;                     // PSWE = 0; PSEE = 0
 146   1      
 147   1         IE_EA = EA_SAVE;                    // Restore interrupts
 148   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     89    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
